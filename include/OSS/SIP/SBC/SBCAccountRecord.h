// OSS Software Solutions Application Programmer Interface
// Package: SBC
// Author: Joegen E. Baclor - mailto:joegen@ossapp.com
//
// Package: SBC
//
// Copyright (c) OSS Software Solutions
//
// Permission is hereby granted, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, execute, and to prepare
// derivative works of the Software, all subject to the
// "OSS Software Solutions OSS API General License Agreement".
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#ifndef SBCACCOUNTRECORD_H_INCLUDED
#define	SBCACCOUNTRECORD_H_INCLUDED


#include "OSS/SIP/SBC/SBCWorkSpaceManager.h"
#include "OSS/JSON/reader.h"
#include "OSS/JSON/writer.h"
#include "OSS/SIP/SIPAuthorization.h"

namespace OSS {
namespace SIP {
namespace SBC {
  
  
class SBCAccountRecord
{
public:
  SBCAccountRecord();
  
  SBCAccountRecord(const SBCAccountRecord& copy);
  
  ~SBCAccountRecord();
  
  void swap(SBCAccountRecord& copy);
  
  SBCAccountRecord& operator = (const SBCAccountRecord& copy);
  
  void setIdentity(const std::string& identity);
  
  const std::string& getIdentity() const;
  
  void setUser(const std::string& user);
  
  const std::string& getUser() const;
  
  void setRealm(const std::string& realm);
  
  const std::string& getRealm() const;
  
  void setA1Hash(const std::string& a1Hash);
  
  const std::string& getA1Hash() const;
  
  bool readFromWorkSpace(const SBCWorkSpaceManager::WorkSpace& workspace, const std::string& key);
  
  bool writeToWorkSpace(const SBCWorkSpaceManager::WorkSpace& workspace, const std::string& key);
  
  void toJson(json::Object& object);
  
  bool computeA1Hash(const std::string& password, std::string& a1Hash) const;
  
  bool isValid() const;
  
  bool computeAuthenticateChallengeHeader(const std::string& callId, const std::string& forceNonce /*will be autogenerated if empty*/, SIPAuthorization& challengeResponse) const;
  
private:
  std::string _identity;
  std::string _user;
  std::string _realm;
  std::string _a1Hash;

};
  

//
// Inlines
//


inline void SBCAccountRecord::setIdentity(const std::string& identity)
{
  _identity = identity;
}
  
inline const std::string& SBCAccountRecord::getIdentity() const
{
  return _identity;
}

inline void SBCAccountRecord::setUser(const std::string& user)
{
  _user = user;
}

inline const std::string& SBCAccountRecord::getUser() const
{
  return _user;
}

inline void SBCAccountRecord::setRealm(const std::string& realm)
{
  _realm = realm;
}

inline const std::string& SBCAccountRecord::getRealm() const
{
  return _realm;
}

inline void SBCAccountRecord::setA1Hash(const std::string& a1Hash)
{
  _a1Hash = a1Hash;
}

inline const std::string& SBCAccountRecord::getA1Hash() const
{
  return _a1Hash;
}

} } }  // OSS::SIP::SBC

#endif	// SBCACCOUNTRECORD_H_INCLUDED


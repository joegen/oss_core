"\n"
"function RouteProfile()\n"
"{\n"
"  \n"
"}\n"
"\n"
"RouteProfile.prototype.setRequest = function(request)\n"
"{\n"
"  this.sipMessage = new SIPMessage(request);\n"
"}\n"
"\n"
"RouteProfile.prototype.isRoutable = function ()\n"
"{\n"
"  return false;\n"
"}\n"
"\n"
"RouteProfile.prototype.routeRequest = function()\n"
"{\n"
"  this.setTransactionTimeout(\"6400\");\n"
"  this.routeAccept();\n"
"}\n"
"\n"
"RouteProfile.prototype.routeByAOR = function(userComparisonOnly)\n"
"{\n"
"  return this.sipMessage.routeByAOR(userComparisonOnly);\n"
"}\n"
"\n"
"RouteProfile.prototype.setInterfaceAddress = function (iface, port)\n"
"{\n"
"  this.sipMessage.setProperty(\"interface-address\", iface);\n"
"  this.sipMessage.setProperty(\"interface-port\", port);\n"
"}\n"
"\n"
"RouteProfile.prototype.setTargetAddress = function(transport, targetHost, targetPort)\n"
"{\n"
"  this.sipMessage.setProperty(\"target-transport\", transport);\n"
"  this.sipMessage.setProperty(\"target-address\", targetHost);\n"
"  this.sipMessage.setProperty(\"target-port\", targetPort);\n"
"}\n"
"\n"
"RouteProfile.prototype.setTargetDomain = function(targetDomain)\n"
"{\n"
"  this.sipMessage.setRequestUriHostPort(targetDomain);\n"
"  this.sipMessage.setFromHostPort(targetDomain);\n"
"  this.sipMessage.setToHostPort(targetDomain);\n"
"}\n"
"\n"
"RouteProfile.prototype.setTargetUser = function(user)\n"
"{\n"
"  this.sipMessage.setRequestUriUser(user);\n"
"  this.sipMessage.setToUser(user);\n"
"}\n"
"\n"
"RouteProfile.prototype.setTransactionTimeout = function(timeout)\n"
"{\n"
"  this.sipMessage.setProperty(\"transaction-timeout\", timeout);\n"
"}\n"
"\n"
"RouteProfile.prototype.flagRoute = function(routeAlias)\n"
"{\n"
"  this.sipMessage.setTransactionProperty(routeAlias, \"1\");\n"
"}\n"
"\n"
"RouteProfile.prototype.isRouteFlagged = function(routeAlias)\n"
"{\n"
"  return  this.sipMessage.getTransactionProperty(routeAlias) == \"1\";\n"
"}\n"
"\n"
"RouteProfile.prototype.allowFailover = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"allow-failover\", \"1\");\n"
"}\n"
"\n"
"RouteProfile.prototype.disallowFailover = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"allow-failover\", \"0\");\n"
"}\n"
"\n"
"RouteProfile.prototype.invokeLocalHandler = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"invoke-local-handler\", \"1\");\n"
"}\n"
"\n"
"RouteProfile.prototype.allowRTPProxy = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"no-rtp-proxy\", \"0\");\n"
"}\n"
"\n"
"RouteProfile.prototype.disallowRTPProxy = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"no-rtp-proxy\", \"1\");\n"
"}\n"
"\n"
"RouteProfile.prototype.enableVerboseRTP = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"enable-verbose-rtp\", \"1\");\n"
"}\n"
"\n"
"RouteProfile.prototype.enableLocal100Rel = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"local-100-rel\", \"1\");\n"
"}\n"
"\n"
"RouteProfile.prototype.enableLocalUpdate = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"local-update\", \"1\");\n"
"}\n"
"\n"
"RouteProfile.prototype.disbleVerboseRTP = function()\n"
"{\n"
"  this.sipMessage.setTransactionProperty(\"enable-verbose-rtp\", \"0\");\n"
"}\n"
"\n"
"RouteProfile.prototype.generateLocalResponse = function(yes)\n"
"{\n"
"  if (typeof yes == \"undefined\")\n"
"    yes = \"1\";\n"
"  this.sipMessage.setTrasanctionProperty(\"generate-local-response\", yes);\n"
"}\n"
"\n"
"RouteProfile.prototype.handleLocalReg = function(a1, realm, expires)\n"
"{\n"
"  if (!this.sipMessage.isRequest(\"REGISTER\"))\n"
"    return;\n"
"  this.sipMessage.setTransactionProperty(\"invoke-local-handler\", \"1\");\n"
"  this.sipMessage.setTransactionProperty(\"auth-a1-hash\", a1);\n"
"  this.sipMessage.setTransactionProperty(\"auth-realm\", realm);\n"
"  this.sipMessage.setTransactionProperty(\"reg-expires\", expires);\n"
"}\n"
"\n"
"RouteProfile.prototype.stringStartsWith = function(str1, str2)\n"
"{\n"
"  return (str1.substr(0, str2.length) == str2);\n"
"}\n"
"\n"
"RouteProfile.prototype.removeStringPrefix = function(oldString, prefix)\n"
"{\n"
"  if (typeof oldString == \"undefined\" || typeof prefix == \"undefined\")\n"
"  {\n"
"    return \"\";\n"
"  }\n"
"\n"
"  if (prefix.length > oldString.length)\n"
"    return oldString;\n"
"\n"
"  if (oldString.substr(0, prefix.length) == prefix)\n"
"  {\n"
"    return oldString.substr(prefix.length, oldString.length - prefix.length);\n"
"  }\n"
"\n"
"  return oldString;\n"
"}\n"
"\n"
"RouteProfile.prototype.stripCallPrefix = function(prefix)\n"
"{\n"
"  var dialString = thissipMessage.getRequestUriUser();\n"
"  if (typeof dialString == \"undefined\" || typeof prefix == \"undefined\")\n"
"  {\n"
"    return;\n"
"  }\n"
"  var newDialString = this.removeStringPrefix(dialString, prefix);\n"
"  if (dialString.length > newDialString.length)\n"
"    this.sipMessage.setRequestUriUser(newDialString);\n"
"}\n"
"\n"
"RouteProfile.prototype.routeReject = function()\n"
"{\n"
"  this.sipMessage.setProperty(\"route-action\", \"reject\");\n"
"}\n"
"\n"
"RouteProfile.prototype.routeAccept = function()\n"
"{\n"
"  this.sipMessage.setProperty(\"route-action\", \"continue\");\n"
"}\n"
"\n"
"RouteProfile.prototype.setRejectReason = function(reason)\n"
"{\n"
"  this.sipMessage.setProperty(\"reject-reason\", reason);\n"
"}\n"
"\n"
"RouteProfile.prototype.setRejectCode = function(code)\n"
"{\n"
"  this.sipMessage.setProperty(\"reject-code\", code);\n"
"}\n"
"\n"
"RouteProfile.prototype.createA1Hash = function(userName, domain, password)\n"
"{\n"
"  return md5Hash(userName + \":\" + domain + \":\" + password);\n"
"}\n"
"\n"
"RouteProfile.prototype.bridgeToGateway = function(gatewayName)\n"
"{\n"
"    this.sipMessage.setProperty(\"action\", \"bridge-to-gateway\");\n"
"    this.sipMessage.setProperty(\"gateway\", gatewayName);\n"
"}\n"
"\n"
"RouteProfile.prototype.bridge = function(authUser, authPass)\n"
"{\n"
"    this.sipMessage.setProperty(\"action\", \"bridge-to-sbc\");\n"
"    if (typeof authUser != \"undefined\" && typeof authPass != \"undefined\")\n"
"    {\n"
"        this.sipMessage.setProperty(\"bridge-auth-user\", authUser);\n"
"        this.sipMessage.setProperty(\"bridge-auth-password\", authPass);\n"
"    }\n"
"\n"
"}\n"
"\n"
"RouteProfile.prototype.bridgeToConference = function(room, pin, flags)\n"
"{\n"
"    this.sipMessage.setProperty(\"action\", \"bridge-to-conference\");\n"
"    this.sipMessage.setProperty(\"conf-room\", room);\n"
"    if (typeof pin != \"undefined\")\n"
"    {\n"
"        this.sipMessage.setProperty(\"conf-pin\", pin);\n"
"    }\n"
"    if (typeof flags != \"undefined\")\n"
"    {\n"
"        this.sipMessage.setProperty(\"conf-flags\", flags);\n"
"    }\n"
"}\n"
"\n"
"RouteProfile.prototype.sendRegister = function(user, domain, password, registrar, expires, interfaceIndex)\n"
"{\n"
"    if (typeof interfaceIndex != \"number\" || typeof expires != \"number\")\n"
"        return false;\n"
"\n"
"    if (typeof user != \"string\" || typeof domain != \"string\" || typeof password != \"string\" || typeof registrar != \"string\")\n"
"        return false;\n"
"\n"
"    var localAddress = sip_interface_address[interfaceIndex];\n"
"    var localPort = sip_interface_port[interfaceIndex];\n"
"\n"
"    bridge_add_gateway(user, domain, password, \"\", registrar, true, expires, localAddress, parseInt(localPort));\n"
"}\n"
"\n"
"\n"

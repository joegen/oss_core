"function SIPMessage(request)\n"
"  //\n"
"  // The SIPMessage class is a utility wrapper for the javascript API exposed by\n"
"  // Flexi-Route.\n"
"  //\n"
"  // Arguments:\n"
"  //  request: (Object) The request handle obtained from handle_request() procedure\n"
"  //\n"
"  // Return Type: Object\n"
"  //\n"
"  // Usage:\n"
"  //  function handle_request(request)\n"
"  //  {\n"
"  //    var msg = new SIPMessage(request);\n"
"  //    // Perform message operation here\n"
"  //  }\n"
"  //\n"
"{\n"
"  this._request = request;\n"
"}\n"
"\n"
"\n"
"SIPMessage.prototype.getLogId = function()\n"
"  //\n"
"  // This function will return the logger context-id to allow Flexi-Route to\n"
"  // set an identical context-id with the underlying dialog.  The context-id\n"
"  // is normally used as a filter to retrieve logs for a particular transaction\n"
"  // or dialog through command line tools such as the unix grep command.\n"
"  //\n"
"  // Parameters: None\n"
"  //\n"
"  // Return Type: string\n"
"  //\n"
"  // Usage:\n"
"  //  var logId = this._sipMessage.getLogId();\n"
"  //  log_info(logId, \"this is a sample javascript log entry\");\n"
"  //\n"
"{\n"
"  return msgGetTransactionProperty(this._request, \"log-id\");\n"
"}\n"
"\n"
"SIPMessage.prototype.setProperty = function(propertyName, propertyValue)\n"
"  //\n"
"  // This function is used to set properties of a SIPMessage that may affect\n"
"  // transaction behavior in dealing with the SIPMessage.\n"
"  //\n"
"  // Parameters:\n"
"  //  propertyName: (String) The name of the property to set\n"
"  //  propertyValue: (String) The value of the property\n"
"  //\n"
"  // Return Type: void\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  msg.setProperty(\"some-property\", \"some-value\");\n"
"  //\n"
"{\n"
"  if (typeof propertyValue == \"undefined\")\n"
"    propertyValue = \"?\";\n"
"  log_debug(this.getLogId(), \"Setting property \" + propertyName + \"=\" + propertyValue);\n"
"  msgSetProperty(this._request, propertyName, propertyValue);\n"
"}\n"
"\n"
"SIPMessage.prototype.getProperty = function(propertyName)\n"
"  //\n"
"  // This function returns the current value of a SIPMessage property.\n"
"  //\n"
"  // Parameters:\n"
"  //  propertyName: (String) The name of the property to get\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var someProp = msg.getProperty(\"some-property\");\n"
"  //\n"
"{\n"
"  return msgGetProperty(this._request, propertyName);\n"
"}\n"
"\n"
"SIPMessage.prototype.setTransactionProperty = function(propertyName, propertyValue)\n"
"  //\n"
"  // This function is used to set properties of a transaction that may affect\n"
"  // over-all transaction behavior.\n"
"  //\n"
"  // Parameters:\n"
"  //  propertyName: (String) The name of the property to set\n"
"  //  propertyValue: (String) The value of the property\n"
"  //\n"
"  // Return Type: void\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  msg.setTransactionProperty(\"some-property\", \"some-value\");\n"
"  //\n"
"{\n"
"  log_debug(this.getLogId(), \"Setting transaction property \" + propertyName + \"=\" + propertyValue);\n"
"  msgSetTransactionProperty(this._request, propertyName, propertyValue);\n"
"}\n"
"\n"
"SIPMessage.prototype.getTransactionProperty = function(propertyName)\n"
"  //\n"
"  // This function returns the current value of a Transaction property.\n"
"  //\n"
"  // Parameters:\n"
"  //  propertyName: (String) The name of the property to get\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var someProp = msg.getTransactionProperty(\"some-property\");\n"
"  //\n"
"{\n"
"  return msgGetTransactionProperty(this._request, propertyName);\n"
"}\n"
"\n"
"SIPMessage.prototype.getSourceAddress = function()\n"
"  //\n"
"  // This function returns the source address of the packet.  Take note\n"
"  // that the via hostport and the source address are not always similar.\n"
"  // This function deals with the actual source address and not the via\n"
"  // hostport.  The reuturn value would only include the address and not the\n"
"  // port (See getSourcePort()).\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var src = msg.getSourceAddress();\n"
"  //\n"
"{\n"
"  return msgGetSourceAddress(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.getSourcePort = function()\n"
"  //\n"
"  // This function returns the source port of the packet.  Take note\n"
"  // that the via port and the source address are not always similar.\n"
"  // This function deals with the actual source port and not the via\n"
"  // port.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var addr = msg.getSourceAddress();\n"
"  //  var port = msg.getSourcePort();\n"
"  //\n"
"{\n"
"  return msgGetSourcePort(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.getSourceAddressAndPort = function()\n"
"{\n"
"	return this.getSourceAddress() + \":\" + this.getSourcePort();\n"
"}\n"
"\n"
"SIPMessage.prototype.getInterfaceAddress = function()\n"
"  //\n"
"  // This function returns the interface address that received the request.\n"
"  // Take note that this only returns the address and not the port used by the\n"
"  // interface (See getInterfacePort).\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var addr = msg.getInterfaceAddress();\n"
"  //  var port = msg.getInterfacePort();\n"
"  //\n"
"{\n"
"  return msgGetInterfaceAddress(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.getInterfacePort = function()\n"
"  //\n"
"  // This function returns the interface port that received the request.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var addr = msg.getInterfaceAddress();\n"
"  //  var port = msg.getInterfacePort();\n"
"  //\n"
"{\n"
"  return msgGetInterfacePort(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.getRequestUri = function()\n"
"  //\n"
"  // This function returns the request-uri of a SIP request message.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var uri = msg.getRequestUri();\n"
"  //\n"
"{\n"
"  return msgGetRequestUri(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.setRequestUri = function(requestUri)\n"
"  //\n"
"  // This function changes the request-uri of a SIP request message.  This\n"
"  // function returns true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  requestUri: (String) The new SIP URI.  Must be in valid URI format.\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var uri = \"sip:alice@atalanta.com\";\n"
"  //  msg.setRequestUri(uri);\n"
"  //\n"
"{\n"
"  msgSetRequestUri(this._request, requestUri);\n"
"}\n"
"\n"
"SIPMessage.prototype.getRequestUriUser = function()\n"
"  //\n"
"  // This function returns the user part of the request-uri.  For telephone\n"
"  // calls, this is normally the function used to retrieve the dialed number.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var user = msg.getRequestUriUser();\n"
"  //\n"
"{\n"
"  return msgGetRequestUriUser(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.setRequestUriUser = function(user)\n"
"  //\n"
"  // This function changes the user portion of the request-uri.  This function\n"
"  // returns true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  user: (String) The new user value\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var user = \"alice\";\n"
"  //  msg.setRequestUriUser(user);\n"
"  //\n"
"{\n"
"  msgSetRequestUriUser(this._request, user);\n"
"}\n"
"\n"
"SIPMessage.prototype.getRequestUriHostPort = function()\n"
"  //\n"
"  // This function returns the hostport portion of the request uri.\n"
"  // Hostport refers to host:port tuple where port is optional.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var hostPort = msg.getRequestUriHostPort();\n"
"  //\n"
"{\n"
"  return msgGetRequestUriHostPort(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.setRequestUriHostPort = function(hostPort)\n"
"  //\n"
"  // This function changes the hostport portion of the request uri.\n"
"  // Hostport refers to host:port tuple where port is optional.  This function\n"
"  // returns true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  hostPort: (String) The new value for the request-uri hostport\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var hostPort = \"192.168.0.10:5060\";\n"
"  //  msg.setRequestUriHostPort(hostPort);\n"
"  //\n"
"{\n"
"  msgSetRequestUriHostPort(this._request, hostPort);\n"
"}\n"
"\n"
"SIPMessage.prototype.getToUser = function()\n"
"  //\n"
"  // This function returns the user portion of the to-uri.  Take note that\n"
"  // the user portion of the to-uri is not similar to the current intended\n"
"  // target since proxies may change the target without touching the to-uri.\n"
"  // Please see getRequestUriUser() if you intend to retrieve the current\n"
"  // transaction target.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var user = msg.getToUser();\n"
"  //\n"
"{\n"
" return msgGetToUser(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.setToUser = function(user)\n"
"  //\n"
"  // This function changes the user portion of the to-uri.  This function will\n"
"  // return true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  user: (String) The new user\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var newUser = \"alice\";\n"
"  //  msg.setToUser(newUser);\n"
"  //\n"
"{\n"
" msgSetToUser(this._request, user);\n"
"}\n"
"\n"
"SIPMessage.prototype.getToHostPort = function()\n"
"  //\n"
"  // This function returns the hostport portion of the to-uri.\n"
"  // Hostport refers to host:port tuple where port is optional.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var hostPort = msg.getToHostPort();\n"
"  //\n"
"{\n"
" return msgGetToHostPort(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.getToHost = function()\n"
"  //\n"
"  // This function returns the host portion of the to-uri.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var host = msg.getToHost();\n"
"  //\n"
"{\n"
" return msgGetToHost(this._request);\n"
"}\n"
"\n"
"\n"
"SIPMessage.prototype.setToHostPort = function(hostPort)\n"
"  //\n"
"  // This function changes the hostport portion of the to-uri.\n"
"  // Hostport refers to host:port tuple where port is optional.\n"
"  // This function will return true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  user: (String) The new user\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  msg.setToHostPort(\"atlanta.com\");\n"
"  //\n"
"{\n"
"  msgSetToHostPort(this._request, hostPort);\n"
"}\n"
"\n"
"SIPMessage.prototype.getFromUser = function()\n"
"  //\n"
"  // This function returns the user portion of the from-uri.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var user = msg.getFromUser();\n"
"  //\n"
"{\n"
"  return msgGetFromUser(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.setFromUser = function(user)\n"
"  //\n"
"  // This function changes the user portion of the from-uri.  This function\n"
"  // returns true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  user: (String) Replacement value\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var user = \"alice\";\n"
"  //  msg.setFromUser(user);\n"
"  //\n"
"{\n"
"  msgSetFromUser(this._request, user);\n"
"}\n"
"\n"
"SIPMessage.prototype.setFromUriUser = function(user)\n"
"{\n"
"  msgSetFromUser(this._request, user);\n"
"}\n"
"\n"
"SIPMessage.prototype.getFromHostPort = function()\n"
"  //\n"
"  // This function returns the hostport portion of the from-uri.\n"
"  // Hostport refers to host:port tuple where port is optional.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var hostPort = msg.getFromHostPort();\n"
"  //\n"
"{\n"
"  return msgGetFromHostPort(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.getFromHost = function()\n"
"  //\n"
"  // This function returns the host portion of the from-uri.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var host = msg.getFromHost();\n"
"  //\n"
"{\n"
"  return msgGetFromHost(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.setFromHostPort = function(hostPort)\n"
"  //\n"
"  // This function changes the hostport portion of the from-uri.\n"
"  // Hostport refers to host:port tuple where port is optional.\n"
"  // This function will return true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  user: (String) The new user\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  msg.setFromHostPort(\"proxy.atlanta.com:5060\");\n"
"  //\n"
"{\n"
" msgSetFromHostPort(this._request, hostPort);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrPresent = function(headerName)\n"
"  //\n"
"  // This function will return true if a certain SIP header exists in the request.\n"
"  //\n"
"  // Parameter:\n"
"  //  headerName: (String) The name of the header to check.\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var hasExpires = msg.hdrPresent(\"expires\");\n"
"  //\n"
"{\n"
"  return msgHdrPresent(this._request, headerName);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrGetSize = function(headerName)\n"
"  //\n"
"  // This function will return the size of list headers such as via, route and\n"
"  // record-route headers\n"
"  //\n"
"  // Parameter:\n"
"  //  headerName: (String) The name of the header to check.\n"
"  //\n"
"  // Return Type: Integer\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var viaCount = msg.hdrGetSize(\"via\");\n"
"  //\n"
"{\n"
"  return msgHdrGetSize(this._request, headerName);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrGet = function(headerName)\n"
"  //\n"
"  // This function will return the raw string value of SIP headers present in a\n"
"  // SIPMessage\n"
"  //\n"
"  // Parameter:\n"
"  //  headerName: (String) The name of the header to retrieve.\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var from = msg.hdrGet(\"from\");\n"
"  //\n"
"{\n"
"  return msgHdrGet(this._request, headerName);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrSet = function(headerName, hdrValue)\n"
"  //\n"
"  // This function will change the value of a particular SIP header or add\n"
"  // a new header if it exists.  If successful, this function will return true.\n"
"  //\n"
"  // Parameters:\n"
"  //  hdrName: (String) The name of the SIP header to change or add\n"
"  //  hdrValue: (String) Replacement value for the SIP header\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var srcAddr = msg.getSourceAddress();\n"
"  //  msg.hdrSet(\"RemoteIP\", srcAddr);\n"
"  //\n"
"{\n"
"  msgHdrSet(this._request, headerName, hdrValue);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrRemove = function(headerName)\n"
"  //\n"
"  // This function will remove an existing SIP header. This fucntion must be\n"
"  // used carefully since altering SIP headers may directly affect proper\n"
"  // transaction operation.  This function will return true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  headerName: (String) The name of the header to delete\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  // var msg = new SIPMessage(request);\n"
"  //  msg.hdrRemove(\"user-agent\");\n"
"  //  msg.hdrSet(\"User-Agent\", \"My own cool user agent\");\n"
"  //\n"
"{\n"
"  msgHdrRemove(this._request, headerName);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrListAppend = function(headerName, headerValue)\n"
"  //\n"
"  // This function will append a new item in a set of existing list headers.\n"
"  // Example of list headers are routes and record-routes.  Take note that\n"
"  // appending means the header will be inserted at the bottom of the list.\n"
"  // This function will return true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  headerName: (String) The name of the list header to append.\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  msg.hdrListAppend(\"Record-Route\", \"<sip:myhost:5060;lr>\");\n"
"  //\n"
"{\n"
"  msgHdrListAppend(this._request, headerName, headerValue);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrListPrepend = function(headerName, headerValue)\n"
"  //\n"
"  // This function will prepend a new item in a set of existing list headers.\n"
"  // Example of list headers are routes and record-routes.  Take note that\n"
"  // prepending means the header will be inserted at the top of the list.\n"
"  // This function will return true if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  headerName: (String) The name of the list header to prepend.\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  msg.hdrListAppend(\"Record-Route\", \"<sip:myhost:5060;lr>\");\n"
"  //\n"
"{\n"
"  msgHdrListPrepend(this._request, headerName, headerValue);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrListPopFront = function(headerName)\n"
"  //\n"
"  // This function pops the top most header from a set of existing list headers.\n"
"  // Example of list headers are routes and record-routes.  Popping a list header\n"
"  // deletes the header from the list and would return the raw string value\n"
"  // of the popped header or type-undefined if unsuccessful.\n"
"  //\n"
"  // Parameters:\n"
"  //  headerName: (String) The name of the list header to pop.\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  var topRR = msg.hdrListPopFront(\"Record-Route\");\n"
"  //\n"
"{\n"
"  return msgHdrListPopFront(this._request, headerName);\n"
"}\n"
"\n"
"SIPMessage.prototype.hdrListRemove = function(headerName)\n"
"  //\n"
"  // This function will remove an entire set (multiple headers) of list headers\n"
"  // and returns true if sucessful.\n"
"  //\n"
"  // Parameters:\n"
"  //  headerName: (String) The name of the list header set to remove.\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  msg.hdrListRemove(\"Record-Route\");\n"
"  //\n"
"{\n"
"  return msgHdrListRemove(this._request, headerName);\n"
"}\n"
"\n"
"SIPMessage.prototype.isRequest = function(method)\n"
"  //\n"
"  // This function returns true if the SIP message is a request, false if it's\n"
"  // a response and type-undefined if there was an error. An optional method\n"
"  // parameter can be set to check against a specific method.\n"
"  //\n"
"  // Parameters:\n"
"  //  method: (String)(Optional) The specific method name to check\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.isRequest(\"INVITE\"))\n"
"  //  {\n"
"  //    //Do your INVITE specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIsRequest(this._request, method);\n"
"}\n"
"\n"
"SIPMessage.prototype.isResponse = function()\n"
"  //\n"
"  // This function returns true if the SIP message is a response, false if it's\n"
"  // a request and type-undefined if there was an error.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.isResponse())\n"
"  //  {\n"
"  //    // Do your response specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIsResponse(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.is1xx = function()\n"
"  //\n"
"  // This function returns true if the SIP message is a response with code 1xx\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.is1xx())\n"
"  //  {\n"
"  //    // Do your 1xx specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIs1xx(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.is2xx = function()\n"
"  //\n"
"  // This function returns true if the SIP message is a response with code 2xx\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.is2xx())\n"
"  //  {\n"
"  //    // Do your 2xx specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIs2xx(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.is3xx = function()\n"
"  //\n"
"  // This function returns true if the SIP message is a response with code 3xx\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.is3xx())\n"
"  //  {\n"
"  //    // Do your 3xx specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIs3xx(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.is4xx = function()\n"
"  //\n"
"  // This function returns true if the SIP message is a response with code 4xx\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.is4xx())\n"
"  //  {\n"
"  //    // Do your 4xx specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIs4xx(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.is5xx = function()\n"
"  //\n"
"  // This function returns true if the SIP message is a response with code 5xx\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.is5xx())\n"
"  //  {\n"
"  //    // Do your 5xx specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIs5xx(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.is6xx = function()\n"
"  //\n"
"  // This function returns true if the SIP message is a response with code 6xx\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.is6xx())\n"
"  //  {\n"
"  //    // Do your 6xx specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIs6xx(this._request);\n"
"}\n"
"\n"
"\n"
"SIPMessage.prototype.isErrorResponse = function()\n"
"  //\n"
"  // This function returns true if the SIP message is an error response\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.isErrorResponse())\n"
"  //  {\n"
"  //    // Do your error specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIsErrorResponse(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.isMidDialog = function()\n"
"  //\n"
"  // This function returns true if the SIP message is mid-dialog\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  if (msg.isMidDialog())\n"
"  //  {\n"
"  //    // Do your dialog specific stuffs here\n"
"  //  }\n"
"  //\n"
"{\n"
"  return msgIsMidDialog(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.getBody = function()\n"
"  //\n"
"  // This function returns the body of a SIPMessage if it exists or type-undefined\n"
"  // if it doesn't.\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = SIPMessage(request);\n"
"  //  var contentType = msg.hdrGet(\"content-type\");\n"
"  //  var sdp = \"\";\n"
"  //  if (contentType == \"application/sdp\")\n"
"  //    sdp = msg.getBody();\n"
"  //\n"
"{\n"
"  return msgGetBody(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.setBody = function(body)\n"
"  //\n"
"  // This function sets the value of the SIP message body.  It will return true\n"
"  // if successful.\n"
"  //\n"
"  // Parameters:\n"
"  //  body: (String) The value of the new body\n"
"  //\n"
"  // Return Type: Boolean\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = SIPMessage(request);\n"
"  //  msg.hdrSet(\"content-type\", \"text/plain\");\n"
"  //  msg.setBody(\"This is a simple plain text body\");\n"
"  //\n"
"{\n"
"  msgSetBody(this._request, body);\n"
"}\n"
"\n"
"SIPMessage.prototype.getStartLine = function()\n"
"  //\n"
"  // This function returns the raw start-line of the SIPMessage\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = SIPMessage(request);\n"
"  //  var startLine = msg.getStartLine();\n"
"  //\n"
"{\n"
"  return msgGetStartLine(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.setStartLine = function(sline)\n"
"  //\n"
"  // This function returns the raw start-line of the SIPMessage\n"
"  //\n"
"  // Parameters:\n"
"  //  sline: (String) The new startline value\n"
"  //\n"
"  // Return Type: void\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = SIPMessage(request);\n"
"  //  msg.setStartLine(\"INVITE sip:1234@192.168.0.10:5060 SIP/2.0\");\n"
"  //\n"
"{\n"
"  msgSetStartLine(this._request, sline);\n"
"}\n"
"\n"
"SIPMessage.prototype.getContactUri = function()\n"
"  //\n"
"  // This function returns the contact-uri of the SIPMessage\n"
"  //\n"
"  // Parameters: void\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = SIPMessage(request);\n"
"  //  var contactUri = msg.getContactUri();\n"
"  //\n"
"{\n"
"    return msgGetContactUri(this._request);\n"
"}\n"
"\n"
"SIPMessage.prototype.getContactParameter = function(parameter)\n"
"  //\n"
"  // This function returns the contact-uri-parameter of the SIPMessage\n"
"  // if one exists in the parameter list\n"
"  //\n"
"  // Parameters:\n"
"  //  parameter: (String) The name of the parameter\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = SIPMessage(request);\n"
"  //  var expires = msg.getContactParameter(\"expires\");\n"
"  //\n"
"{\n"
"    return msgGetContactParameter(this._request, parameter);\n"
"}\n"
"\n"
"SIPMessage.prototype.getAuthenticator = function(realm)\n"
"  //\n"
"  // This function returns the raw Authorization or Proxy-Authorization header\n"
"  // for a particular realm if it exists in the SIPMessage.  The realm is\n"
"  // used to identify the exact header during cases where there are multiple\n"
"  // authorization headers.  Using * in the header means simply return the first\n"
"  // authorization header if it exists.  This is normally used by the script\n"
"  // during cases where the script explicitly channlenged a particular request\n"
"  // for authority.\n"
"  //\n"
"  // Parameters:\n"
"  //  parameter: (String) The realm of the authentiator\n"
"  //\n"
"  // Return Type: String\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = SIPMessage(request);\n"
"  //  var expires = msg.getContactParameter(\"expires\");\n"
"  //\n"
"{\n"
"    return msgGetAuthenticator(this._request, realm);\n"
"}\n"
"\n"
"SIPMessage.prototype.routeByAOR = function(userComparisonOnly)\n"
"  //\n"
"  // This function will attempt to route the request using the registration table\n"
"  //\n"
"  // Parameters:\n"
"  //  userComparisonOnly: (Bool) flag to indicate whether to match the entire AOR or to just use the user\n"
"  //\n"
"  // Return Type: String\n"
"{\n"
"    return msgRouteByAOR(this._request, userComparisonOnly);\n"
"}\n"
"\n"
"SIPMessage.prototype.resetMaxForwards = function(maxForwards)\n"
"  //\n"
"  // This function allows\n"
"  // rewriting of max-forwards header which might be too low a value to properly\n"
"  // allow SIP Messages to spiral in systems like sipXecs.  This function will\n"
"  // return false if the request already contains a via to points back to Karoo\n"
"  //\n"
"  // Parameters:\n"
"  //   maxForwards: (String) new value to be used for max-forwards header\n"
"  //\n"
"  // Return Type: Bool\n"
"  //\n"
"  // Usage:\n"
"  //  var msg = new SIPMessage(request);\n"
"  //  msg.resetMaxForwards(\"20\");\n"
"  //\n"
"{\n"
"    return msgResetMaxForwards(this._request, maxForwards);\n"
"}\n"
